{
	"__add": "array(\"a\") + array(\"b\") -- array(\"a\", \"b\")",
	"__concat": "array(\"a\")..array(\"b\") -- array(\"a\", \"b\")",
	"__eq": "array(\"a\", array(\"b\")) == array(\"a\", array(\"b\")) -- true",
	"__index": "array(\"a\", \"b\", \"c\")[1] -- \"a\"\narray(\"a\", \"b\", \"c\")[-1] -- \"c\"",
	"__len": "#array(\"a\") -- 1",
	"__mul": "array(\"a\", \"b\") * array(\"b\", \"c\") -- array(\"b\")",
	"__newindex": "array(\"a\")[2] = \"b\" -- array(\"a\", \"b\")",
	"__pairs": "for i, v in pairs(array(\"a\", \"b\", \"c\")) do\n\tprint(i, v)\nend\n> 1, \"a\"\n>2, \"b\"\n>3, \"c\"",
	"__sub": "array(\"a\", \"b\") - array(\"b\") -- array(\"a\")",
	"addafter": "local a = array(\"a\", \"b\")\na:addafter(2, \"c\")\na -- array(\"a\", \"b\", \"c\")",
	"addbefore": "local a = array(\"b\", \"c\")\na:addbefore(1, \"a\")\na -- array(\"a\", \"b\", \"c\")",
	"addend": "local a = array(\"a\", \"b\")\na:addend(\"c\")\na -- array(\"a\", \"b\", \"c\")",
	"addstart": "local a = array(\"b\", \"c\")\na:addstart(\"a\")\na -- array(\"a\", \"b\", \"c\")",
	"chunk": "local a = array(\"a\", \"b\", \"c\")\na:chunk(2)\na -- array(array(\"a\", \"b\"), array(\"c\"))",
	"clone": "array(\"a\", \"b\", \"c\"):clone() -- array(\"a\", \"b\", \"c\")",
	"contains": "array(\"a\", \"b\", \"c\"):contains(\"c\") -- true",
	"del": "local a = array(\"a\", \"b\", \"c\")\na:del(2)\na -- array(\"a\", \"c\")",
	"delend": "local a = array(\"a\", \"b\", \"c\")\na:delend() -- \"c\"",
	"delstart": "local a = array(\"a\", \"b\", \"c\")\na:delstart() -- \"a\"",
	"each": "array(\"a\", \"b\", \"c\"):each(function (i, elt) print(i, elt) end)",
	"every": "array(\"a\", \"b\", \"c\"):every(function (i, elt) return type(elt) == \"string\" end) -- true",
	"filter": "array(\"a\", \"b\", \"c\"):filter(function (i, elt) return i % 2 == 0 end) -- array(\"b\")",
	"find": "array(\"a\", \"b\", \"c\"):find(function (i, elt) return elt < \"c\" end) -- \"a\"",
	"first": "array(\"a\", \"b\", \"c\"):first() -- 1, \"a\"",
	"firstindexof": "array(\"a\", \"b\", \"c\"):firstindexof(\"b\") -- 2",
	"flat": "array(\"a\", \"b\", array(\"c\")):flat() -- array(\"a\", \"b\", \"c\")",
	"intersect": "array(\"a\", \"b\"):intersect(array(\"b\", \"c\")) -- array(\"b\")",
	"isempty": "array(\"a\", \"b\", \"c\"):isempty() -- false",
	"join": "array(\"a\", \"b\", \"c\"):join(\", \") -- \"a, b, c\"",
	"last": "array(\"a\", \"b\", \"c\"):last() -- 3, \"c\"",
	"lastindexof": "array(\"a\", \"b\", \"c\"):lastindexof(\"b\") -- 2",
	"len": "array(\"a\", \"b\", \"c\"):len() -- 3",
	"map": "array(\"a\", \"b\", \"c\"):map(function (i, elt) return elt:upper() end) -- array(\"A\", \"B\", \"C\")",
	"only": "array(1, 10, 50):only(function (a, b) return a > b and a or b end) -- 50",
	"padend": "array(\"a\", \"b\", \"c\"):padend(6, \"d\") -- array(\"a\", \"b\", \"c\", \"d\", \"d\", \"d\")",
	"padstart": "array(\"a\", \"b\", \"c\"):padstart(6, \"d\") -- array(\"d\", \"d\", \"d\", \"a\", \"b\", \"c\")",
	"reduceend": "array(\"a\", \"b\", \"c\"):reduceend(function (prev, i, elt) return prev..elt end) -- \"cba\"",
	"reducestart": "array(\"a\", \"b\", \"c\"):reducestart(function (prev, i, elt) return prev..elt end) -- \"abc\"",
	"reverse": "array(\"a\", \"b\", \"c\"):reverse() -- array(\"c\", \"b\", \"c\")",
	"shuffle": "array(\"a\", \"b\", \"c\"):shuffle() -- Could be array(\"b\", \"c\", \"a\") for example",
	"slice": "array(\"a\", \"b\", \"c\"):slice(-3, 2) -- array(\"a\", \"b\")",
	"some": "array(\"a\", \"b\", \"c\"):some(function (i, elt) return elt == \"a\" end) -- true",
	"sort": "array(\"c\", \"a\", \"b\"):sort() -- array(\"a\", \"b\", \"c\")",
	"subtract": "array(\"a\", \"b\"):subtract(array(\"b\") -- array(\"a\")",
	"totable": "array(\"a\", \"b\", \"c\"):totable() -- {\"a\", \"b\", \"c\"}",
	"unite": "array(\"a\", \"b\"):unite(array(\"b\", \"c\")) -- array(\"a\", \"b\", \"c\")",
	"uniq": "array(\"a\", \"b\", \"c\", \"b\"):uniq() -- array(\"a\", \"b\", \"c\")"
}
